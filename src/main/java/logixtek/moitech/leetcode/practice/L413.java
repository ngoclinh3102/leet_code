package logixtek.moitech.leetcode.practice;

public class L413 {

    public static void main(String[] args) {
        System.out.println(numberOfArithmeticSlices2(new int[]{
                27,2,-32,38,-21,27,-44,34,-31,-5,-2,-20,7,-31,14,5,30,-12,-23,-10,13,28,-19,21,
                -45,15,-33,16,47,-23,-25,-22,45,43,-4,14,-46,36,11,-21,-19,35,47,39,29,-41,-9,
                -34,29,-11,-43,-18,45,-5,12,0,14,-41,48,-11,10,22,-15,12,-35,42,5,-2,-8,31,-23,
                45,-17,25,-21,-12,-6,-2,0,-21,33,7,-35,-6,43,10,-38,-12,40,10,-9,18,-31,18,-1,
                31,-9,-17,2,-12,-38,-16,40,-46,26,-44,38,39,10,-4,10,-17,-24,-21,28,40,-5,-33,
                -23,8,-3,8,-9,-25,-38,23,-50,15,25,-30,46,12,-6,39,28,-1,-48,38,28,-44,-9,-22,
                13,-21,3,-10,24,-33,-13,35,18,3,-49,-45,23,19,15,0,-9,-1,-17,-39,-50,-3,33,32,
                -32,41,-44,-23,42,-5,-42,-10,46,-28,8,-23,38,13,30,6,46,7,-45,21,5,-28,-10,36,
                6,-36,33,-31,15,-41,15,11,-14,-27,-27,-22,5,-12,-34,27,-6,39,36,-13,2,-2,-41,39,
                -29,-1,-29,5,22,12,-16,22,13,16,-10,6,41,-29,12,-24,-3,-29,-7,31,-8,-36,2,-49,-6,
                -2,-48,-11,5,43,49,48,-30,18,34,-27,6,22,32,-42,-36,18,42,-33,-44,-18,-43,-12,-11,
                45,7,-3,-15,27,45,-2,-49,9,-18,28,-32,-35,27,8,-43,-34,-37,-21,-20,-43,30,-43,-4,
                11,9,7,42,-30,27,-28,27,5,18,-34,4,-21,37,41,21,28,22,-41,20,48,-38,33,26,-5,-36,
                39,-45,-45,-33,28,-38,33,46,-4,-4,-36,-49,-33,-30,48,-27,24,21,-12,-22,43,-6,-19,
                -47,-9,1,27,31,43,32,22,-44,33,-19,-14,-39,40,-7,-35,-15,-40,45,21,-37,32,6,0,35,
                24,9,17,-5,7,-6,18,10,9,-22,-32,15,-42,-27,38,-24,-23,42,-20,-24,16,-8,19,8,-31,-36,
                -41,-11,30,27,8,-19,-13,5,23,-26,26,-20,-12,35,4,-22,-22,-50,20,-25,8,21,-14,-4,45,
                -25,21,44,31,9,43,34,-20,-7,27,33,-49,16,-14,12,1,7,-30,-48,-48,20,-33,24,16,-16,33,
                8,-22,0,-31,18,-10,-10,-3,-40,42,31,-15,33,16,31,-42,-45,-18,5,-33,-17,-40,43,-13,22,
                -39,-44,-7,6,17,-48,-33,17,35,-48,40,12,-37,8,19,24,26,-34,47,-27,-50,10,-46,-44,9,-21,
                9,-13,-29,-11,-7,-16,-18,-4,28,-45,-5,-16,25,47,-7,-27,-43,48,31,-10,42,25,10,-1,24,-2,
                -15,-21,-33,-15,-21,0,-20,43,43,-29,16,21,45,48,-11,-15,21,33,-35,22,25,-27,28,-38,48
        }));
//        System.out.println(numberOfArithmeticSlices2(new int[]{1})); // 0
//        System.out.println(numberOfArithmeticSlices2(new int[]{1,2,3,4})); // 3
//        System.out.println(numberOfArithmeticSlices2(new int[]{1,2,3,4,5,6})); // 10
    }

    public static int numberOfArithmeticSlices2(int[] nums) {
        int totalSubArrays = 0;

        int count = 1;
        for (int i = 1; i + 1 < nums.length; i++) {
            if (nums[i] - nums[i-1] == nums[i+1] - nums[i]) totalSubArrays += count++;
            else count = 1;
        }
        return totalSubArrays;
    }

    public static int numberOfArithmeticSlices(int[] nums) {
        final int MAX_VALUE = 2023;

        int[] dp = new int[nums.length];

        dp[0] = dp[dp.length-1] = MAX_VALUE;
        for (int i = 1; i + 1 < dp.length; i++) {
            if (nums[i] - nums[i-1] == nums[i+1] - nums[i]) dp[i] = nums[i] - nums[i-1];
            else dp[i] = MAX_VALUE;
        }

        int totalSubArrays = 0;
        for (int i = 1; i + 1 < dp.length; i++) {
            if (dp[i] == MAX_VALUE) continue;
            int j = i;
            while (dp[i+1] == dp[j]) i++;
            totalSubArrays += ((i - j + 1) * (i - j + 1 + 1)) / 2; // n * (n + 1) / 2 = 1 + 2 + 3 ... + n
        }

        return totalSubArrays;
    }
}
